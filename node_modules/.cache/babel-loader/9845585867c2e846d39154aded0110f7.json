{"ast":null,"code":"import http from \"../http-spotify\";\n\nclass SpotifyService {\n  getAuth() {\n    return http.get(\"/songdatas\");\n  }\n\n  getTopData(id) {\n    return http.get(`/songdatas/${id}`);\n  }\n\n  login(data) {\n    app.get('/login', function (req, res) {\n      var state = generateRandomString(16);\n      res.cookie(stateKey, state); // your application requests authorization\n      //var scope = 'user-read-private user-read-email';\n\n      var scope = 'user-top-read';\n      res.redirect('https://accounts.spotify.com/authorize?' + querystring.stringify({\n        response_type: 'code',\n        client_id: process.env.CLIENT_ID,\n        scope: scope,\n        redirect_uri: process.env.REDIRECT_URI,\n        state: state\n      }));\n    });\n    return http.post(\"/songdatas\", data);\n  }\n\n  updateToken() {\n    //app.get('/refresh_token', function (req, res) {\n    // requesting access token from refresh token \n    function getHashParams() {\n      var hashParams = {};\n      var e,\n          r = /([^&;=]+)=?([^&;]*)/g,\n          q = window.location.hash.substring(1);\n\n      while (e = r.exec(q)) {\n        hashParams[e[1]] = decodeURIComponent(e[2]);\n      }\n\n      return hashParams;\n    }\n\n    var params = getHashParams();\n    var access_token = params.access_token,\n        refresh_token = params.refresh_token,\n        error = params.error;\n    /*http.post(authOptions, function (error, response, body) {\r\n        if (!error && response.statusCode === 200) {\r\n            var access_token = body.access_token;\r\n            res.send({\r\n                'access_token': access_token\r\n            });\r\n        }\r\n    });*/\n\n    http.post('/refresh_token', {\n      data: {\n        'refresh_token': refresh_token\n      }\n    }).then(response => {\n      console.log(response); //dispatch({ type: FOUND_USER, data: response.data[0] })\n    }).catch(error => {\n      console.log(error); //dispatch({ type: ERROR_FINDING_USER })\n    }); //return response.access_token//http.put(`/songdatas/${id}`, data);\n  }\n\n}\n\nexport default new SpotifyService();","map":{"version":3,"names":["http","SpotifyService","getAuth","get","getTopData","id","login","data","app","req","res","state","generateRandomString","cookie","stateKey","scope","redirect","querystring","stringify","response_type","client_id","process","env","CLIENT_ID","redirect_uri","REDIRECT_URI","post","updateToken","getHashParams","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","params","access_token","refresh_token","error","then","response","console","log","catch"],"sources":["B:/Otavio/Documents/IOT/FrontMaisTocadasUFMG/src/services/spotify.service.js"],"sourcesContent":["import http from \"../http-spotify\";\r\n\r\nclass SpotifyService {\r\n    getAuth() {\r\n        return http.get(\"/songdatas\");\r\n    }\r\n    getTopData(id) {\r\n        return http.get(`/songdatas/${id}`);\r\n    }\r\n    login(data) {\r\n\r\n        app.get('/login', function (req, res) {\r\n\r\n            var state = generateRandomString(16);\r\n            res.cookie(stateKey, state);\r\n\r\n            // your application requests authorization\r\n            //var scope = 'user-read-private user-read-email';\r\n            var scope = 'user-top-read';\r\n            res.redirect('https://accounts.spotify.com/authorize?' +\r\n                querystring.stringify({\r\n                    response_type: 'code',\r\n                    client_id: process.env.CLIENT_ID,\r\n                    scope: scope,\r\n                    redirect_uri: process.env.REDIRECT_URI,\r\n                    state: state\r\n                }));\r\n        });\r\n\r\n        return http.post(\"/songdatas\", data);\r\n    }\r\n    updateToken() { //app.get('/refresh_token', function (req, res) {\r\n        // requesting access token from refresh token \r\n        function getHashParams() {\r\n            var hashParams = {};\r\n            var e, r = /([^&;=]+)=?([^&;]*)/g,\r\n                q = window.location.hash.substring(1);\r\n            while (e = r.exec(q)) {\r\n                hashParams[e[1]] = decodeURIComponent(e[2]);\r\n            }\r\n            return hashParams;\r\n        }\r\n        var params = getHashParams();\r\n        var access_token = params.access_token,\r\n            refresh_token = params.refresh_token,\r\n            error = params.error;\r\n\r\n        /*http.post(authOptions, function (error, response, body) {\r\n            if (!error && response.statusCode === 200) {\r\n                var access_token = body.access_token;\r\n                res.send({\r\n                    'access_token': access_token\r\n                });\r\n            }\r\n        });*/\r\n\r\n        http.post('/refresh_token', {\r\n            data: {\r\n                'refresh_token': refresh_token\r\n            }\r\n        })\r\n            .then((response) => {\r\n                console.log(response) //dispatch({ type: FOUND_USER, data: response.data[0] })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)//dispatch({ type: ERROR_FINDING_USER })\r\n            })\r\n\r\n        //return response.access_token//http.put(`/songdatas/${id}`, data);\r\n    }\r\n}\r\nexport default new SpotifyService();"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,iBAAjB;;AAEA,MAAMC,cAAN,CAAqB;EACjBC,OAAO,GAAG;IACN,OAAOF,IAAI,CAACG,GAAL,CAAS,YAAT,CAAP;EACH;;EACDC,UAAU,CAACC,EAAD,EAAK;IACX,OAAOL,IAAI,CAACG,GAAL,CAAU,cAAaE,EAAG,EAA1B,CAAP;EACH;;EACDC,KAAK,CAACC,IAAD,EAAO;IAERC,GAAG,CAACL,GAAJ,CAAQ,QAAR,EAAkB,UAAUM,GAAV,EAAeC,GAAf,EAAoB;MAElC,IAAIC,KAAK,GAAGC,oBAAoB,CAAC,EAAD,CAAhC;MACAF,GAAG,CAACG,MAAJ,CAAWC,QAAX,EAAqBH,KAArB,EAHkC,CAKlC;MACA;;MACA,IAAII,KAAK,GAAG,eAAZ;MACAL,GAAG,CAACM,QAAJ,CAAa,4CACTC,WAAW,CAACC,SAAZ,CAAsB;QAClBC,aAAa,EAAE,MADG;QAElBC,SAAS,EAAEC,OAAO,CAACC,GAAR,CAAYC,SAFL;QAGlBR,KAAK,EAAEA,KAHW;QAIlBS,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG,YAJR;QAKlBd,KAAK,EAAEA;MALW,CAAtB,CADJ;IAQH,CAhBD;IAkBA,OAAOX,IAAI,CAAC0B,IAAL,CAAU,YAAV,EAAwBnB,IAAxB,CAAP;EACH;;EACDoB,WAAW,GAAG;IAAE;IACZ;IACA,SAASC,aAAT,GAAyB;MACrB,IAAIC,UAAU,GAAG,EAAjB;MACA,IAAIC,CAAJ;MAAA,IAAOC,CAAC,GAAG,sBAAX;MAAA,IACIC,CAAC,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,SAArB,CAA+B,CAA/B,CADR;;MAEA,OAAON,CAAC,GAAGC,CAAC,CAACM,IAAF,CAAOL,CAAP,CAAX,EAAsB;QAClBH,UAAU,CAACC,CAAC,CAAC,CAAD,CAAF,CAAV,GAAmBQ,kBAAkB,CAACR,CAAC,CAAC,CAAD,CAAF,CAArC;MACH;;MACD,OAAOD,UAAP;IACH;;IACD,IAAIU,MAAM,GAAGX,aAAa,EAA1B;IACA,IAAIY,YAAY,GAAGD,MAAM,CAACC,YAA1B;IAAA,IACIC,aAAa,GAAGF,MAAM,CAACE,aAD3B;IAAA,IAEIC,KAAK,GAAGH,MAAM,CAACG,KAFnB;IAIA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ1C,IAAI,CAAC0B,IAAL,CAAU,gBAAV,EAA4B;MACxBnB,IAAI,EAAE;QACF,iBAAiBkC;MADf;IADkB,CAA5B,EAKKE,IALL,CAKWC,QAAD,IAAc;MAChBC,OAAO,CAACC,GAAR,CAAYF,QAAZ,EADgB,CACM;IACzB,CAPL,EAQKG,KARL,CAQYL,KAAD,IAAW;MACdG,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EADc,CACI;IACrB,CAVL,EAzBU,CAqCV;EACH;;AAnEgB;;AAqErB,eAAe,IAAIzC,cAAJ,EAAf"},"metadata":{},"sourceType":"module"}